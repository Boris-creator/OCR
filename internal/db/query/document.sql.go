// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: document.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (
    file_id, chat_id, hash, ocr
) VALUES(
    $1, $2, $3, $4
) RETURNING id
`

type CreateDocumentParams struct {
	FileID string
	ChatID int64
	Hash   pgtype.UUID
	Ocr    []byte
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (int64, error) {
	row := q.db.QueryRow(ctx, createDocument,
		arg.FileID,
		arg.ChatID,
		arg.Hash,
		arg.Ocr,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getDocumentByHash = `-- name: GetDocumentByHash :one
SELECT id, ocr FROM documents
WHERE hash = $1 AND chat_id = $2
`

type GetDocumentByHashParams struct {
	Hash   pgtype.UUID
	ChatID int64
}

type GetDocumentByHashRow struct {
	ID  int64
	Ocr []byte
}

func (q *Queries) GetDocumentByHash(ctx context.Context, arg GetDocumentByHashParams) (GetDocumentByHashRow, error) {
	row := q.db.QueryRow(ctx, getDocumentByHash, arg.Hash, arg.ChatID)
	var i GetDocumentByHashRow
	err := row.Scan(&i.ID, &i.Ocr)
	return i, err
}
